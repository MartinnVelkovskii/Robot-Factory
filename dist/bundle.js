/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/ChatManager.ts":
/*!****************************!*\
  !*** ./src/ChatManager.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar ChatManager = /** @class */ (function () {\r\n    function ChatManager(messages) {\r\n        this._showNewestMessegesFirst = true;\r\n        this._messages = messages;\r\n    }\r\n    Object.defineProperty(ChatManager.prototype, \"messages\", {\r\n        get: function () {\r\n            return this._messages;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    ChatManager.prototype.getMessagesHtml = function (robot) {\r\n        var _this = this;\r\n        var finalHtml = \"\";\r\n        this._messages\r\n            .filter(function (m) { return m.date > robot.createdDate; })\r\n            .sort(function (a, b) { return _this._showNewestMessegesFirst ? b.date - a.date : a.date - b.date; })\r\n            .forEach(function (message) { return (finalHtml += _this.generateMessageHtml(message)); });\r\n        return finalHtml;\r\n    };\r\n    ChatManager.prototype.generateMessageHtml = function (message) {\r\n        if (message.text != \"\") {\r\n            return \"<div><span class=\\\"message-name-style\\\" style=\\\"color:\".concat(message.robotColor, \"\\\">\").concat(message.robotName, \"</span> \").concat(message.time, \"</div>\\n        <div class=\\\"message-text-style\\\">\").concat(message.text, \"</div>\");\r\n        }\r\n        else {\r\n            return \"\";\r\n        }\r\n    };\r\n    ChatManager.prototype.addNewMessage = function (message) {\r\n        this._messages.push(message);\r\n    };\r\n    ChatManager.prototype.addNewHTMLMessage = function (message, messagesSection) {\r\n        var messageHtml = this.generateMessageHtml(message);\r\n        var currentMessagesHtml = messagesSection.innerHTML;\r\n        messagesSection.innerHTML = messageHtml + currentMessagesHtml;\r\n    };\r\n    ChatManager.prototype.reverseMessages = function (robot) {\r\n        this._showNewestMessegesFirst = !this._showNewestMessegesFirst;\r\n        var MSGSection = document.querySelector(\"#messagesSection\");\r\n        MSGSection.innerHTML = this.getMessagesHtml(robot);\r\n    };\r\n    ChatManager.prototype.saveToLocalStorage = function (message) {\r\n        var jsonMessages = JSON.parse(localStorage.getItem(\"messages\"));\r\n        var messages = jsonMessages || [];\r\n        messages.push(message);\r\n        var messageJSON = messages.map(function (message) { return message.toJsonString; });\r\n        localStorage.setItem(\"messages\", \"[\" + messageJSON.toString() + \"]\");\r\n    };\r\n    ChatManager.getLocalStorageMessages = function () {\r\n        var jsonMessages = JSON.parse(localStorage.getItem(\"messages\"));\r\n        var messages = jsonMessages || [];\r\n        return messages;\r\n    };\r\n    return ChatManager;\r\n}());\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ChatManager);\r\n\n\n//# sourceURL=webpack:///./src/ChatManager.ts?");

/***/ }),

/***/ "./src/Message.ts":
/*!************************!*\
  !*** ./src/Message.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar Message = /** @class */ (function () {\r\n    function Message(text, time, date, robotName, robotColor) {\r\n        this._text = text;\r\n        this._time = time;\r\n        this._date = date;\r\n        this._robotName = robotName;\r\n        this._robotColor = robotColor;\r\n    }\r\n    Object.defineProperty(Message.prototype, \"text\", {\r\n        get: function () {\r\n            return this._text;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Message.prototype, \"time\", {\r\n        get: function () {\r\n            return this._time;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Message.prototype, \"date\", {\r\n        get: function () {\r\n            return this._date;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Message.prototype, \"robotName\", {\r\n        get: function () {\r\n            return this._robotName;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Message.prototype, \"robotColor\", {\r\n        get: function () {\r\n            return this._robotColor;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Message.prototype.toJsonString = function () {\r\n        var json = JSON.stringify(this);\r\n        Object.keys(this).filter(function (key) { return key[0] === \"_\"; }).forEach(function (key) {\r\n            json = json.replace(key, key.substring(1));\r\n        });\r\n        return json;\r\n    };\r\n    return Message;\r\n}());\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Message);\r\n\n\n//# sourceURL=webpack:///./src/Message.ts?");

/***/ }),

/***/ "./src/Robot.ts":
/*!**********************!*\
  !*** ./src/Robot.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar Robot = /** @class */ (function () {\r\n    function Robot(name, color, type, phrase, options, ceatedDate) {\r\n        this._name = name;\r\n        this._color = color;\r\n        this._type = type;\r\n        this._phrase = phrase;\r\n        this._options = options;\r\n        this._createdDate = ceatedDate;\r\n    }\r\n    Object.defineProperty(Robot.prototype, \"name\", {\r\n        get: function () {\r\n            return this._name;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Robot.prototype, \"color\", {\r\n        get: function () {\r\n            return this._color;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Robot.prototype, \"type\", {\r\n        get: function () {\r\n            return this._type;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Robot.prototype, \"phrase\", {\r\n        get: function () {\r\n            return this._phrase;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Robot.prototype, \"options\", {\r\n        get: function () {\r\n            return this._options;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Robot.prototype, \"createdDate\", {\r\n        get: function () {\r\n            return this._createdDate;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Robot.prototype.toJsonString = function () {\r\n        var json = JSON.stringify(this);\r\n        Object.keys(this).filter(function (key) { return key[0] === \"_\"; }).forEach(function (key) {\r\n            json = json.replace(key, key.substring(1));\r\n        });\r\n        return json;\r\n    };\r\n    return Robot;\r\n}());\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Robot);\r\n\n\n//# sourceURL=webpack:///./src/Robot.ts?");

/***/ }),

/***/ "./src/create-form.ts":
/*!****************************!*\
  !*** ./src/create-form.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Robot__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Robot */ \"./src/Robot.ts\");\n/* harmony import */ var _Message__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Message */ \"./src/Message.ts\");\n/* harmony import */ var _ChatManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ChatManager */ \"./src/ChatManager.ts\");\n\r\n\r\n\r\n//#region global variables\r\nvar form = document.querySelector(\"#create-form\");\r\nform.addEventListener(\"submit\", createRobot);\r\nvar canTalkCheckbox = document.querySelector(\"#robot-select-option-2\");\r\ncanTalkCheckbox.addEventListener(\"change\", onCanTalkCheckboxChange);\r\nvar showCreatedButton = document.querySelector(\"#s-button\");\r\nshowCreatedButton.addEventListener(\"click\", showCreatedRobotsSection);\r\nvar clearRobotsButton = document.querySelector(\"#t-button\");\r\nclearRobotsButton.addEventListener(\"click\", clearStorage);\r\nvar RobotType;\r\n(function (RobotType) {\r\n    RobotType[\"male\"] = \"Male\";\r\n    RobotType[\"female\"] = \"Female\";\r\n})(RobotType || (RobotType = {}));\r\nvar jsonRobots = JSON.parse(localStorage.getItem(\"robots\"));\r\nvar robots = jsonRobots || [];\r\nvar activeIndex = 0;\r\nvar chatManager = new _ChatManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"](_ChatManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getLocalStorageMessages());\r\n//#endregion\r\n//#region Robot Section\r\nif (robots.length) {\r\n    robots.forEach(function (robot) { return createNewRobotSection(robot); });\r\n    createButtons();\r\n    robots.length != 1 && enableButtons();\r\n}\r\nfunction showCreatedRobotsSection() {\r\n    if (robots.length > 0) {\r\n        var innerHTML_1 = \"\\n    <div class=\\\"robots-found-style\\\">\".concat(robots.length, \" robots found</div>  \\n  <table class=\\\"styled-table\\\">\\n  <thead>\\n  <tr>\\n    <th>Name</th>\\n    <th>Type</th>\\n    <th>Color</th>\\n    <th>Options</th>\\n  </tr>\\n  </thead>\\n\");\r\n        robots.forEach(function (robot, index) {\r\n            innerHTML_1 += createTableRow(robot, index);\r\n        });\r\n        innerHTML_1 += \"</table>\";\r\n        document.querySelector(\"#e-section\").innerHTML = innerHTML_1;\r\n        robots.forEach(function (robot, index) {\r\n            var linkClick = document.querySelector(\"#link\".concat(index));\r\n            linkClick.addEventListener(\"click\", function () { return onLinkClicked(index); });\r\n        });\r\n    }\r\n    else {\r\n        document.querySelector(\"#e-section\").innerHTML = \"No robots created yet\";\r\n    }\r\n}\r\nfunction createTableRow(robot, index) {\r\n    var colorBlock = \"<div class=\\\"table-color\\\" style=\\\"background-color:\".concat(robot.color, \";\\\"></div>\");\r\n    return \"\\n<tbody> <tr> <td> <a id=\\\"link\".concat(index, \"\\\" href=\\\"#\\\" \\\"> \").concat(robot.name !== \"\" ? robot.name : \"\", \" </a> </td>\\n<td>\").concat(robot.type, \"</td>\\n<td>\").concat(robot.color !== \"\" ? colorBlock : \"\", \"</td>\\n<td>\").concat(optionCheck(robot), \"</td> </tr> </tbody>\");\r\n}\r\nfunction createNewRobotSection(robot) {\r\n    console.log(robot);\r\n    document.querySelector(\"#robot-slide\").innerHTML = \" \\n    <section id=\\\"slide-1\\\" class=\\\"factory-section\\\">\\n      <div class=\\\"robot-title-box\\\">\\n        <div class=\\\"robot-title-heading\\\">\\n          <h2>\".concat(robot.type, \" Robot</h2>\\n        </div>\\n        <div class=\\\"triangle\\\">\\n          <div class=\\\"triangle-empty\\\"></div>\\n        </div>\\n      </div>\\n      <div class=\\\"content-wrapper\\\">\\n        <div class=\\\"left-side\\\">   \\n            <div class=\\\"robot\\\">\\n              <div class=\\\"robot-head\\\">\\n              <div class=\\\"\").concat(canTalk(robot.options.option2, robot.phrase)\r\n        ? \"speech bubble bubble-position\"\r\n        : \"d-none\", \"\\\">\\n              \").concat(robot.phrase, \" </div>\\n                <div class=\\\"left-eye\\\"></div>\\n                <div class=\\\"right-eye \").concat(robot.options.option3 === true ? \"blink\" : \"\", \"\\\"></div>\\n                <div class=\\\"mouth \").concat(canTalk(robot.options.option2, robot.phrase) ? \"talk\" : \"\", \"\\\"></div>\\n              </div>\\n              <div class=\\\"md-parts\\\">\\n                <div class=\\\"arms arm1\\\"></div>\\n                <div style=\\\"color:\").concat(robot.color, \"\\\" class=\\\"\").concat(robot.type === \"Male\" ? \"male-robot-body\" : \"female-robot-body\", \"\\\"></div>\\n                <div class=\\\"arms arm2\\\"></div>\\n              </div>\\n              <div class=\\\"down-parts\\\">\\n                <div class=\\\"legs leg1 \").concat(robot.options.option1 === true ? \"jump\" : \"\", \"\\\"></div>\\n                <div class=\\\"legs leg2 \").concat(robot.options.option1 === true ? \"jump\" : \"\", \"\\\"></div>\\n              </div>\\n            </div>\\n            <div class=\\\"robot-name\\\">\").concat(robot.name, \"</div>\\n          </div>\\n        <div class=\\\"right-side\\\">\\n        <div class=\\\"message-label\\\"> <label for=\\\"message\\\">Send message:</label>\\n        <input class=\\\"message-input-style\\\" type=\\\"text\\\" id=\\\"message\\\"> </div>\\n        <div class=\\\"message-send-button-container\\\"><button id=\\\"send-message\\\" class=\\\"message-send-button\\\">Send</button></div>\\n        <div class=\\\"message-send-button-container\\\"><button id=\\\"reverse-message\\\" class=\\\"message-send-button\\\">Reverse</button></div>\\n        <div class=\\\"last-message-text-style\\\"> <div class=\\\"hr-style\\\"> <hr> </div><div class=\\\"last-messages-style\\\">Last Messages </div> <div class=\\\"hr-style\\\"><hr> </div> </div>\\n        <div class=\\\"message-section\\\" id=\\\"messagesSection\\\">\\n        \").concat(chatManager.getMessagesHtml(robot), \"\\n        </div>\\n        </div>\\n      </div>\\n    </section>\\n    \");\r\n    var sendMessage = document.querySelector(\"#send-message\");\r\n    sendMessage.addEventListener(\"click\", function () { return onSendMessageClicked(); });\r\n    var reverseMessages = document.querySelector(\"#reverse-message\");\r\n    reverseMessages.addEventListener(\"click\", function () {\r\n        return chatManager.reverseMessages(robot);\r\n    });\r\n}\r\nfunction createRobot(event) {\r\n    var textArea = form.querySelector(\"#robot-comments-textarea\");\r\n    var error = false;\r\n    var name = form.querySelector(\"#robot-name-input\");\r\n    var selectType = form.querySelector(\"#robot-select-type\");\r\n    var selectColor = form.querySelector(\"#robot-select-color\");\r\n    var phrase = form.querySelector(\"#robot-comments-textarea\");\r\n    var option1 = form.querySelector(\"#robot-select-option-1\").checked;\r\n    var option2 = form.querySelector(\"#robot-select-option-2\").checked;\r\n    var option3 = form.querySelector(\"#robot-select-option-3\").checked;\r\n    if (!name.value || name.value == \"\") {\r\n        form.querySelector(\"#robot-name-validation\").textContent =\r\n            \"*This field is required!\";\r\n        error = true;\r\n    }\r\n    else {\r\n        form.querySelector(\"#robot-name-validation\").textContent = \"\";\r\n    }\r\n    if (!selectType.value || selectType.value == \"\") {\r\n        form.querySelector(\"#robot-type-validation\").textContent =\r\n            \"*This field is required!\";\r\n        error = true;\r\n    }\r\n    else {\r\n        form.querySelector(\"#robot-type-validation\").textContent = \"\";\r\n    }\r\n    if (!selectColor.value || selectColor.value == \"\") {\r\n        form.querySelector(\"#robot-color-validation\").textContent =\r\n            \"*This field is required!\";\r\n        error = true;\r\n    }\r\n    else {\r\n        form.querySelector(\"#robot-color-validation\").textContent = \"\";\r\n    }\r\n    if (option2 == true && textArea.value == \"\") {\r\n        form.querySelector(\"#robot-phrase-validation\").textContent =\r\n            \"*This field is required!\";\r\n        error = true;\r\n    }\r\n    else {\r\n        form.querySelector(\"#robot-type-validation\").textContent = \"\";\r\n    }\r\n    if (!error) {\r\n        var robot = new _Robot__WEBPACK_IMPORTED_MODULE_0__[\"default\"](name.value, selectColor.value, getType(selectType.value), phrase.value, { option1: option1, option2: option2, option3: option3 }, Date.now());\r\n        robots.push(robot);\r\n        var robotJSON = robots.map(function (robot) { return robot.toJsonString(); });\r\n        localStorage.setItem(\"robots\", \"[\" + robotJSON.toString() + \"]\");\r\n        activeIndex = robots.length - 1;\r\n        createNewRobotSection(robot);\r\n        activeIndex == 0 ? createButtons() : enableButtons();\r\n    }\r\n    event.preventDefault();\r\n    form.reset();\r\n}\r\n//helper functions\r\nfunction onLinkClicked(index) {\r\n    activeIndex = index;\r\n    createNewRobotSection(robots[activeIndex]);\r\n}\r\nfunction optionCheck(robot) {\r\n    var checkedOptions = [];\r\n    robot.options.option1 === true ? checkedOptions.push(\"can jump\") : \"\";\r\n    robot.options.option2 === true ? checkedOptions.push(\"can talk\") : \"\";\r\n    robot.options.option3 === true ? checkedOptions.push(\"can blink\") : \"\";\r\n    return checkedOptions.join(\",\");\r\n}\r\nfunction getType(robotType) {\r\n    if (robotType === \"Male\") {\r\n        return RobotType.male;\r\n    }\r\n    else {\r\n        return RobotType.female;\r\n    }\r\n}\r\n//#endregion\r\n//#region Messeges\r\nfunction onSendMessageClicked() {\r\n    var robot = robots[activeIndex];\r\n    var now = new Date();\r\n    var time = now.toLocaleTimeString([], {\r\n        hour: \"2-digit\",\r\n        minute: \"2-digit\",\r\n    });\r\n    var messageSent = document.querySelector(\"#message\").value;\r\n    var newMessage = new _Message__WEBPACK_IMPORTED_MODULE_1__[\"default\"](messageSent, time, Date.now(), robot.name, robot.color);\r\n    //messages.push(newMessage);\r\n    //localStorage.setItem(\"messages\", JSON.stringify(messages));\r\n    chatManager.addNewHTMLMessage(newMessage, document.querySelector(\"#messagesSection\"));\r\n    chatManager.addNewMessage(newMessage);\r\n    chatManager.saveToLocalStorage(newMessage);\r\n    inputReseted();\r\n}\r\nfunction inputReseted() {\r\n    document.querySelector(\"#message\").value = \"\";\r\n}\r\n//#endregion\r\n//#region Talk\r\nfunction canTalk(talkOptionClicked, isPhraseEmpty) {\r\n    return talkOptionClicked === true && isPhraseEmpty !== \"\";\r\n}\r\nfunction onCanTalkCheckboxChange() {\r\n    var checkbox = form.querySelector(\"#robot-select-option-2\");\r\n    var textArea = form.querySelector(\"#robot-comments-textarea\");\r\n    textArea.disabled = !checkbox.checked;\r\n}\r\n//#endregion\r\n//#region Buttons\r\nfunction createButtons() {\r\n    document.querySelector(\"#robot-section\").innerHTML += \"<div class = \\\"buttons-holder\\\"> <button id=\\\"previous-button\\\" class=\\\"\\\" disabled> < Previous</button>\\n  <button id=\\\"next-button\\\" disabled>Next ></button> </div>\";\r\n    var previousButton = document.querySelector(\"#previous-button\");\r\n    previousButton.addEventListener(\"click\", onPreviousClicked);\r\n    var nextButton = document.querySelector(\"#next-button\");\r\n    nextButton.addEventListener(\"click\", onNextClicked);\r\n}\r\nfunction onPreviousClicked() {\r\n    if (activeIndex - 1 < 0) {\r\n        activeIndex = robots.length;\r\n    }\r\n    activeIndex--;\r\n    createNewRobotSection(robots[activeIndex]);\r\n}\r\nfunction onNextClicked() {\r\n    if (activeIndex + 1 > robots.length - 1) {\r\n        activeIndex = -1;\r\n    }\r\n    activeIndex++;\r\n    createNewRobotSection(robots[activeIndex]);\r\n}\r\nfunction enableButtons() {\r\n    var prevButton = document.querySelector(\"#previous-button\");\r\n    var nextButton = document.querySelector(\"#next-button\");\r\n    prevButton.disabled = false;\r\n    nextButton.disabled = false;\r\n}\r\n//#endregion\r\nfunction clearStorage() {\r\n    localStorage.clear();\r\n}\r\n\n\n//# sourceURL=webpack:///./src/create-form.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/create-form.ts");
/******/ 	
/******/ })()
;